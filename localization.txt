1.
#it normalizes the output for 
#the function sense. This means that the entries in q 
#should sum to one.
#p is the list of probability vlaues 
red means found/hit and green means not found/hit


p=[0.2, 0.2, 0.2, 0.2, 0.2]
world=['green', 'red', 'red', 'green', 'green']
Z = 'red'
pHit = 0.6
pMiss = 0.2

def sense(p, Z):
    q=[]
    for i in range(len(p)):
        hit = (Z == world[i])
        q.append(p[i] * (hit * pHit + (1-hit) * pMiss))
    return q
print sense(p,Z)


2.
#Modify the code so that it updates the probability twice
#and gives the posterior distribution after both 
#measurements are incorporated. Make sure that your code 
#allows for any sequence of measurement of any length.

p=[0.2, 0.2, 0.2, 0.2, 0.2]
world=['green', 'red', 'red', 'green', 'green']
measurements = ['red', 'green']
pHit = 0.6
pMiss = 0.2

def sense(p, Z):
    q=[]
    for i in range(len(p)):
        hit = (Z == world[i])
        q.append(p[i] * (hit * pHit + (1-hit) * pMiss))
    s = sum(q)
    for i in range(len(q)):
        q[i] = q[i] / s
    return q
#
#ADD YOUR CODE HERE
#
print p

3.Exact motion-the world is cyclic and the posterior probability 
shifts to the right if the robots moves towards right.We have a 
perfect robot and we shift the prob with robot motion.
4.
#code the exact-motion for the move funcion.
#here u is the number of steps in the right direction 
#as p[U:]+p[:U] gives a left shift then the value of -U
#will give the right shift list
def move(p, U):
    #
    #ADD CODE HERE
    q=[]
    U=-(U%len(p))
    q[:]=p[U:]+p[:U]
    #
    return q

print move(p, 1)
OR Alternatively you could just build a function 
q=[]
for i in range(len(p)):
	q.append(p[(i-U)%len(p)])
return q

4.Inaccurate robot motion
probability showing that the robot motion can be inaccurate slightly showing the probability 
for going off is less (say)0.1 and for it to be correct is 0.8
this needs to be incorporated for a real world simulation as error occurs.

#Modify the move function to accommodate the added 
#probabilities of overshooting or undershooting 
#the intended destination.

p=[0, 1, 0, 0, 0]
world=['green', 'red', 'red', 'green', 'green']
measurements = ['red', 'green']
pHit = 0.6
pMiss = 0.2
pExact = 0.8
pOvershoot = 0.1
pUndershoot = 0.1

def sense(p, Z):
    q=[]
    for i in range(len(p)):
        hit = (Z == world[i])
        q.append(p[i] * (hit * pHit + (1-hit) * pMiss))
    s = sum(q)
    for i in range(len(q)):
        q[i] = q[i] / s
    return q

def move(p, U):
    q = []
    r=[]
    s=[]
    t=[]
    for i in range(len(p)):
        r.append(p[(i-U)%len(p)]*pExact)
        s.append(p[(i-U-1)%len(p)]*pOvershoot)
        t.append(p[(i-U+1)%len(p)]*pUndershoot)
        q.append(r[i]+s[i]+t[i])
    return q
    

print move(p, 1)

